warning: in the working copy of 'App.tsx', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'src/repositories/SettingsRepository.ts', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'src/screens/SettingsScreen.tsx', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/App.tsx b/App.tsx[m
[1mindex 315696e..c988792 100644[m
[1m--- a/App.tsx[m
[1m+++ b/App.tsx[m
[36m@@ -1,4 +1,5 @@[m
 import React, { useEffect, useState } from 'react';[m
[32m+[m[32mimport { View, Text } from 'react-native';[m
 import { NavigationContainer, DarkTheme, useNavigationContainerRef } from '@react-navigation/native';[m
 import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';[m
 import { createStackNavigator } from '@react-navigation/stack';[m
[36m@@ -14,8 +15,9 @@[m [mimport APIScreen from './src/screens/APIScreen';[m
 import SettingsScreen from './src/screens/SettingsScreen';[m
 import ConnectionHistoryScreen from './src/screens/ConnectionHistoryScreen';[m
 import { FreeShowTheme } from './src/theme/FreeShowTheme';[m
[31m-import { AppContextProvider, useConnection } from './src/contexts';[m
[32m+[m[32mimport { AppContextProvider, useConnection, useSettings } from './src/contexts';[m
 import { ErrorBoundary } from './src/components/ErrorBoundary';[m
[32m+[m[32mimport { Sidebar } from './src/components/Sidebar';[m
 import { ErrorLogger } from './src/services/ErrorLogger';[m
 import { configService } from './src/config/AppConfig';[m
 import { settingsRepository } from './src/repositories';[m
[36m@@ -57,26 +59,54 @@[m [mconst useAutoConnectExpected = () => {[m
   return autoConnectExpected;[m
 };[m
 [m
[31m-// Create the main tab navigator[m
[31m-function MainTabs() {[m
[32m+[m[32m// Screen components wrapped with error boundaries[m
[32m+[m[32mconst InterfaceScreen = (props: any) => ([m
[32m+[m[32m  <ErrorBoundary onError={(error, errorInfo) => ErrorLogger.error('ShowSelectorScreen Error', 'App', error, { errorInfo })}>[m
[32m+[m[32m    <ShowSelectorScreen {...props} />[m
[32m+[m[32m  </ErrorBoundary>[m
[32m+[m[32m);[m
[32m+[m
[32m+[m[32mconst ConnectScreenWrapped = (props: any) => ([m
[32m+[m[32m  <ErrorBoundary onError={(error, errorInfo) => ErrorLogger.error('ConnectScreen Error', 'App', error, { errorInfo })}>[m
[32m+[m[32m    <ConnectScreen {...props} />[m
[32m+[m[32m  </ErrorBoundary>[m
[32m+[m[32m);[m
[32m+[m
[32m+[m[32mconst SettingsScreenWrapped = (props: any) => ([m
[32m+[m[32m  <ErrorBoundary onError={(error, errorInfo) => ErrorLogger.error('SettingsScreen Error', 'App', error, { errorInfo })}>[m
[32m+[m[32m    <SettingsScreen {...props} />[m
[32m+[m[32m  </ErrorBoundary>[m
[32m+[m[32m);[m
[32m+[m
[32m+[m[32m// Bottom Tab Navigator[m
[32m+[m[32mfunction BottomTabsLayout() {[m
   const { state } = useConnection();[m
[31m-  const { isConnected, connectionStatus, autoConnectAttempted } = state;[m
[32m+[m[32m  const { isConnected, connectionStatus } = state;[m
   const autoConnectExpected = useAutoConnectExpected();[m
[32m+[m[41m  [m
[32m+[m[32m  // Always call all hooks first[m
[32m+[m[32m  const initialRouteName = React.useMemo(() => {[m
[32m+[m[32m    return autoConnectExpected ? "Interface" : "Connect";[m
[32m+[m[32m  }, [autoConnectExpected]);[m
 [m
[31m-  // Don't render the navigator until we know if auto-connect should be attempted[m
[32m+[m[32m  React.useEffect(() => {[m
[32m+[m[32m    if (autoConnectExpected !== null) {[m
[32m+[m[32m      ErrorLogger.info(`[Navigation] Initial route determined: ${initialRouteName}`, 'App', {[m
[32m+[m[32m        autoConnectExpected,[m
[32m+[m[32m        initialRouteName[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m
[32m+[m[32m  }, [autoConnectExpected, initialRouteName]);[m
[32m+[m
[32m+[m[32m  // Show loading if not ready[m
   if (autoConnectExpected === null) {[m
[31m-    return null; // Or a loading spinner if you prefer[m
[32m+[m[32m    return ([m
[32m+[m[32m      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: FreeShowTheme.colors.primary }}>[m
[32m+[m[32m        <Text style={{ color: FreeShowTheme.colors.text }}>Loading...</Text>[m
[32m+[m[32m      </View>[m
[32m+[m[32m    );[m
   }[m
 [m
[31m-  // Determine initial route[m
[31m-  const initialRouteName = autoConnectExpected ? "Interface" : "Connect";[m
[31m-[m
[31m-  // Log the initial route decision for debugging[m
[31m-  ErrorLogger.info(`[Navigation] Initial route determined: ${initialRouteName}`, 'App', {[m
[31m-    autoConnectExpected,[m
[31m-    initialRouteName[m
[31m-  });[m
[31m-[m
   return ([m
     <Tab.Navigator[m
       initialRouteName={initialRouteName}[m
[36m@@ -132,42 +162,124 @@[m [mfunction MainTabs() {[m
     >[m
       <Tab.Screen [m
         name="Interface"[m
[32m+[m[32m        component={InterfaceScreen}[m
         options={{ tabBarLabel: 'Interface' }}[m
[31m-      >[m
[31m-        {(props) => ([m
[31m-          <ErrorBoundary onError={(error, errorInfo) => ErrorLogger.error('ShowSelectorScreen Error', 'App', error, { errorInfo })}>[m
[31m-            <ShowSelectorScreen {...props} />[m
[31m-          </ErrorBoundary>[m
[31m-        )}[m
[31m-      </Tab.Screen>[m
[32m+[m[32m      />[m
       <Tab.Screen [m
         name="Connect"[m
[31m-        options={{[m
[31m-          tabBarLabel: 'Connect',[m
[31m-        }}[m
[31m-      >[m
[31m-        {(props) => ([m
[31m-          <ErrorBoundary onError={(error, errorInfo) => ErrorLogger.error('ConnectScreen Error', 'App', error, { errorInfo })}>[m
[31m-            <ConnectScreen {...props} />[m
[31m-          </ErrorBoundary>[m
[31m-        )}[m
[31m-      </Tab.Screen>[m
[32m+[m[32m        component={ConnectScreenWrapped}[m
[32m+[m[32m        options={{ tabBarLabel: 'Connect' }}[m
[32m+[m[32m      />[m
       <Tab.Screen [m
         name="Settings"[m
[31m-        options={{[m
[31m-          tabBarLabel: 'Settings',[m
[31m-        }}[m
[31m-      >[m
[31m-        {(props) => ([m
[31m-          <ErrorBoundary onError={(error, errorInfo) => ErrorLogger.error('SettingsScreen Error', 'App', error, { errorInfo })}>[m
[31m-            <SettingsScreen {...props} />[m
[31m-          </ErrorBoundary>[m
[31m-        )}[m
[31m-      </Tab.Screen>[m
[32m+[m[32m        component={SettingsScreenWrapped}[m
[32m+[m[32m        options={{ tabBarLabel: 'Settings' }}[m
[32m+[m[32m      />[m
     </Tab.Navigator>[m
   );[m
 }[m
 [m
[32m+[m[32m// Sidebar Layout with content area[m
[32m+[m[32mfunction SidebarLayout() {[m
[32m+[m[32m  const { navigation: mainNavigation } = useConnection();[m
[32m+[m[32m  const autoConnectExpected = useAutoConnectExpected();[m
[32m+[m[41m  [m
[32m+[m[32m  // Always call all hooks first[m
[32m+[m[32m  const initialRoute = React.useMemo(() => {[m
[32m+[m[32m    return autoConnectExpected ? "Interface" : "Connect";[m
[32m+[m[32m  }, [autoConnectExpected]);[m
[32m+[m[41m  [m
[32m+[m[32m  const [currentRoute, setCurrentRoute] = useState(initialRoute);[m
[32m+[m
[32m+[m[32m  // Update current route when autoConnectExpected changes[m
[32m+[m[32m  React.useEffect(() => {[m
[32m+[m[32m    if (autoConnectExpected !== null) {[m
[32m+[m[32m      const newInitialRoute = autoConnectExpected ? "Interface" : "Connect";[m
[32m+[m[32m      setCurrentRoute(newInitialRoute);[m
[32m+[m[32m      ErrorLogger.info(`[SidebarLayout] Initial route determined: ${newInitialRoute}`, 'App', {[m
[32m+[m[32m        autoConnectExpected,[m
[32m+[m[32m        initialRoute: newInitialRoute[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m
[32m+[m[32m  }, [autoConnectExpected]);[m
[32m+[m
[32m+[m[32m  const handleNavigate = React.useCallback((route: string) => {[m
[32m+[m[32m    setCurrentRoute(route);[m
[32m+[m[32m  }, []);[m
[32m+[m
[32m+[m[32m  // Create a navigation object for sidebar screens[m
[32m+[m[32m  const sidebarNavigation = React.useMemo(() => ({[m
[32m+[m[32m    navigate: (routeName: string, params?: any) => {[m
[32m+[m[32m      if (routeName === 'WebView' || routeName === 'APIScreen') {[m
[32m+[m[32m        // Use the main navigation for modal screens[m
[32m+[m[32m        if (mainNavigation && typeof mainNavigation.navigate === 'function') {[m
[32m+[m[32m          mainNavigation.navigate(routeName, params);[m
[32m+[m[32m        } else {[m
[32m+[m[32m          console.warn('[SidebarLayout] No valid main navigation available for modal screens');[m
[32m+[m[32m        }[m
[32m+[m[32m      } else {[m
[32m+[m[32m        // Use sidebar navigation for main routes[m
[32m+[m[32m        handleNavigate(routeName);[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
[32m+[m[32m    getParent: () => mainNavigation || null,[m
[32m+[m[32m  }), [handleNavigate, mainNavigation]);[m
[32m+[m
[32m+[m[32m  const renderContent = React.useCallback(() => {[m
[32m+[m[32m    switch (currentRoute) {[m
[32m+[m[32m      case 'Interface':[m
[32m+[m[32m        return <InterfaceScreen navigation={sidebarNavigation} />;[m
[32m+[m[32m      case 'Connect':[m
[32m+[m[32m        return <ConnectScreenWrapped navigation={sidebarNavigation} />;[m
[32m+[m[32m      case 'Settings':[m
[32m+[m[32m        return <SettingsScreenWrapped navigation={sidebarNavigation} />;[m
[32m+[m[32m      default:[m
[32m+[m[32m        return <InterfaceScreen navigation={sidebarNavigation} />;[m
[32m+[m[32m    }[m
[32m+[m[32m  }, [currentRoute, sidebarNavigation]);[m
[32m+[m
[32m+[m[32m  // Show loading if not ready[m
[32m+[m[32m  if (autoConnectExpected === null) {[m
[32m+[m[32m    return ([m
[32m+[m[32m      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: FreeShowTheme.colors.primary }}>[m
[32m+[m[32m        <Text style={{ color: FreeShowTheme.colors.text }}>Loading...</Text>[m
[32m+[m[32m      </View>[m
[32m+[m[32m    );[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  return ([m
[32m+[m[32m    <View style={{ flex: 1, flexDirection: 'row', backgroundColor: FreeShowTheme.colors.primary }}>[m
[32m+[m[32m      <Sidebar[m[41m [m
[32m+[m[32m        navigation={null}[m
[32m+[m[32m        currentRoute={currentRoute}[m[41m [m
[32m+[m[32m        onNavigate={handleNavigate}[m[41m [m
[32m+[m[32m      />[m
[32m+[m[32m      <View style={{ flex: 1 }}>[m
[32m+[m[32m        {renderContent()}[m
[32m+[m[32m      </View>[m
[32m+[m[32m    </View>[m
[32m+[m[32m  );[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// Main layout component that chooses between sidebar and bottom tabs[m
[32m+[m[32mfunction MainLayout() {[m
[32m+[m[32m  const { settings } = useSettings();[m
[32m+[m[32m  const [previousLayout, setPreviousLayout] = useState<string | null>(null);[m
[32m+[m[41m  [m
[32m+[m[32m  // Default to bottom bar if settings not loaded yet[m
[32m+[m[32m  const navigationLayout = settings?.navigationLayout || 'bottomBar';[m
[32m+[m[41m  [m
[32m+[m[32m  // Track layout changes for smooth transitions[m
[32m+[m[32m  React.useEffect(() => {[m
[32m+[m[32m    if (previousLayout && previousLayout !== navigationLayout) {[m
[32m+[m[32m      ErrorLogger.info(`[MainLayout] Navigation layout changed from ${previousLayout} to ${navigationLayout}`, 'App');[m
[32m+[m[32m    }[m
[32m+[m[32m    setPreviousLayout(navigationLayout);[m
[32m+[m[32m  }, [navigationLayout, previousLayout]);[m
[32m+[m[41m  [m
[32m+[m[32m  return navigationLayout === 'sidebar' ? <SidebarLayout /> : <BottomTabsLayout />;[m
[32m+[m[32m}[m
[32m+[m
 // FreeShow-themed navigation theme[m
 const FreeShowNavigationTheme = {[m
   ...DarkTheme,[m
[36m@@ -215,7 +327,7 @@[m [mexport default function App() {[m
                 cardStyle: { backgroundColor: FreeShowTheme.colors.primary },[m
               }}[m
             >[m
[31m-              <Stack.Screen name="Main" component={MainTabs} />[m
[32m+[m[32m              <Stack.Screen name="Main" component={MainLayout} />[m
               <Stack.Screen [m
                 name="WebView"[m
                 options={{[m
[1mdiff --git a/src/contexts/ConnectionStateContext.tsx b/src/contexts/ConnectionStateContext.tsx[m
[1mindex 4cd2668..60c2063 100644[m
[1m--- a/src/contexts/ConnectionStateContext.tsx[m
[1m+++ b/src/contexts/ConnectionStateContext.tsx[m
[36m@@ -1,6 +1,7 @@[m
 // Connection State Context - Handles basic connection state and operations[m
 [m
 import React, { createContext, useContext, useState, useEffect, useCallback, ReactNode, useRef } from 'react';[m
[32m+[m[32mimport { AppState, AppStateStatus } from 'react-native';[m
 import { getDefaultFreeShowService } from '../services/DIContainer';[m
 import { IFreeShowService } from '../services/interfaces/IFreeShowService';[m
 import { ErrorLogger } from '../services/ErrorLogger';[m
[36m@@ -47,6 +48,7 @@[m [mexport interface ConnectionContextType {[m
   state: ConnectionState;[m
   actions: ConnectionActions;[m
   service: IFreeShowService;[m
[32m+[m[32m  navigation: any;[m
 }[m
 [m
 const ConnectionContext = createContext<ConnectionContextType | undefined>(undefined);[m
[36m@@ -185,7 +187,7 @@[m [mexport const ConnectionProvider: React.FC<ConnectionProviderProps> = ({[m
           setState(prev => ({ ...prev, autoConnectAttempted: true }));[m
           return;[m
         }[m
[31m-        const timeoutMs = require('../config/AppConfig').configService.getNetworkConfig().connectionTimeout;[m
[32m+[m[32m        const timeoutMs = require('../config/AppConfig').configService.getNetworkConfig().autoConnectTimeout;[m
         ErrorLogger.info('[AutoConnect] Attempting to connect', 'AutoConnect', {[m
           host: lastConnection.host,[m
           port: lastConnection.showPorts?.remote || 5505,[m
[36m@@ -199,7 +201,7 @@[m [mexport const ConnectionProvider: React.FC<ConnectionProviderProps> = ({[m
           ErrorLogger.info('[AutoConnect] Connection attempt timed out', 'AutoConnect');[m
           service.disconnect();[m
           setState(prev => ({ ...prev, connectionStatus: 'error', lastError: 'Auto-connect timeout - connection took too long' }));[m
[31m-        }, timeoutMs);[m
[32m+[m[32m        }, timeoutMs); // timeoutMs is already in milliseconds[m
         const success = await service.connect([m
           lastConnection.host,[m
           lastConnection.showPorts?.remote || 5505,[m
[36m@@ -227,9 +229,14 @@[m [mexport const ConnectionProvider: React.FC<ConnectionProviderProps> = ({[m
           [m
           // Navigate back to Connect tab if auto-connect failed[m
           setTimeout(() => {[m
[31m-            if (navigationRef.current) {[m
[31m-              ErrorLogger.info('[AutoConnect] Auto-connect failed, navigating to Connect tab', 'AutoConnect');[m
[31m-              navigationRef.current.navigate('Main', { screen: 'Connect' });[m
[32m+[m[32m            if (navigationRef.current && typeof navigationRef.current.navigate === 'function') {[m
[32m+[m[32m              try {[m
[32m+[m[32m                ErrorLogger.info('[AutoConnect] Auto-connect failed, navigating to Connect tab', 'AutoConnect');[m
[32m+[m[32m                navigationRef.current.navigate('Main', { screen: 'Connect' });[m
[32m+[m[32m              } catch (navigationError) {[m
[32m+[m[32m                ErrorLogger.error('[AutoConnect] Navigation error during auto-connect fallback', 'AutoConnect',[m[41m [m
[32m+[m[32m                  navigationError instanceof Error ? navigationError : new Error(String(navigationError)));[m
[32m+[m[32m              }[m
             }[m
           }, 100);[m
         }[m
[36m@@ -247,6 +254,192 @@[m [mexport const ConnectionProvider: React.FC<ConnectionProviderProps> = ({[m
     // eslint-disable-next-line react-hooks/exhaustive-deps[m
   }, []);[m
 [m
[32m+[m[32m  // Auto-launch functionality[m
[32m+[m[32m  const triggerAutoLaunch = useCallback(async (nav?: any) => {[m
[32m+[m[32m    try {[m
[32m+[m[32m      const navToUse = nav || navigationRef.current;[m
[32m+[m[32m      ErrorLogger.debug('[AutoLaunch] Attempting auto-launch', 'ConnectionStateContext', {[m[41